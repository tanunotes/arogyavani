console.log("Script loaded!");

// State
let appState = {
  userType: null,
  language: "en",
  darkMode: false,
  reminders: [],
  caregiverPhone: "",
};

// Language codes
const languageCodes = {
  en: "en-IN",
  hi: "hi-IN",
  te: "te-IN",
  ta: "ta-IN",
  bn: "bn-IN",
  mr: "mr-IN",
  gu: "gu-IN",
  kn: "kn-IN",
  ml: "ml-IN",
  pa: "pa-IN",
};

// Translations
const translations = {
  en: {
    selectUserTitle: "Select User Type",
    caregiverBtn: "ЁЯСитАНтЪХ Caregiver / Family",
    patientBtn: "ЁЯдТ Patient",
    caregiverInfo:
      "You are in Caregiver mode. Add medicine reminders for your patient.",
    patientInfo: "Patient mode activated. Listen for voice reminders!",
    addReminderTitle: "Add Medicine Reminder",
    labelMedicine: "Medicine Name",
    labelDosage: "Dosage",
    labelTime: "Time",
    labelFrequency: "Frequency",
    labelCaregiverPhone: "Caregiver Phone Number (for alerts)",
    remindersTitle: "All Reminders",
    noReminders: "No reminders added yet. Add your first reminder above!",
    activeRemindersTitle: "Your Medicine Reminders",
    noActiveReminders:
      "No active reminders. Your caregiver will add them for you.",
    voiceCommandTitle: "Voice Command",
    voiceInstructions:
      'Press the microphone and say: "TAKEN" | "SNOOZE" | "HELP"',
    quickActionsTitle: "Quick Actions",
    speakAllBtn: "ЁЯФК Read All Reminders",
    emergencyBtn: "ЁЯЪи Emergency Call",
    itsTimeTake: "It is time to take",
    dosageIs: "Dosage is",
    sayTaken: "Say TAKEN if you took the medicine",
    saySnooze: "Say SNOOZE to remind later",
    sayHelp: "Say HELP if you missed or need assistance",
    reminderAdded: "Reminder added successfully",
    markedTaken: "Medicine marked as taken",
    snoozed: "Reminder snoozed for 10 minutes",
    caregiverNotified: "Caregiver notified via SMS",
    fillAllFields: "Please fill all fields",
    deleted: "Reminder deleted",
    taken: "тЬЕ Taken",
    pending: "тП░ Pending",
    delete: "ЁЯЧС Delete",
    markTaken: "тЬЕ Mark Taken",
    snooze: "тП░ Snooze 10 min",
    notifyCaregiver: "ЁЯУЮ Call Caregiver",
  },
  hi: {
    selectUserTitle: "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ",
    caregiverBtn: "ЁЯСитАНтЪХ рджреЗрдЦрднрд╛рд▓рдХрд░реНрддрд╛ / рдкрд░рд┐рд╡рд╛рд░",
    patientBtn: "ЁЯдТ рд░реЛрдЧреА",
    caregiverInfo: "рдЖрдк рджреЗрдЦрднрд╛рд▓рдХрд░реНрддрд╛ рдореЛрдб рдореЗрдВ рд╣реИрдВред",
    patientInfo: "рд░реЛрдЧреА рдореЛрдб рд╕рдХреНрд░рд┐рдпред",
    addReminderTitle: "рджрд╡рд╛ рд░рд┐рдорд╛рдЗрдВрдбрд░ рдЬреЛрдбрд╝реЗрдВ",
    labelMedicine: "рджрд╡рд╛ рдХрд╛ рдирд╛рдо",
    labelDosage: "рдЦреБрд░рд╛рдХ",
    labelTime: "рд╕рдордп",
    labelFrequency: "рдЖрд╡реГрддреНрддрд┐",
    labelCaregiverPhone: "рджреЗрдЦрднрд╛рд▓рдХрд░реНрддрд╛ рдлреЛрди рдирдВрдмрд░",
    remindersTitle: "рд╕рднреА рд░рд┐рдорд╛рдЗрдВрдбрд░",
    noReminders: "рдЕрднреА рддрдХ рдХреЛрдИ рд░рд┐рдорд╛рдЗрдВрдбрд░ рдирд╣реАрдВред",
    activeRemindersTitle: "рдЖрдкрдХреА рджрд╡рд╛ рд░рд┐рдорд╛рдЗрдВрдбрд░",
    noActiveReminders: "рдХреЛрдИ рд╕рдХреНрд░рд┐рдп рд░рд┐рдорд╛рдЗрдВрдбрд░ рдирд╣реАрдВред",
    voiceCommandTitle: "рдЖрд╡рд╛рдЬ рдХрдорд╛рдВрдб",
    voiceInstructions: 'рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рджрдмрд╛рдПрдВ: "рд▓рд┐рдпрд╛" | "рдмрд╛рдж рдореЗрдВ" | "рдорджрдж"',
    quickActionsTitle: "рддреНрд╡рд░рд┐рдд рдХреНрд░рд┐рдпрд╛рдПрдВ",
    speakAllBtn: "ЁЯФК рд╕рднреА рд░рд┐рдорд╛рдЗрдВрдбрд░ рдкрдврд╝реЗрдВ",
    emergencyBtn: "ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдХреЙрд▓",
    itsTimeTake: "рдЕрдм рд╕рдордп рд╣реИ",
    dosageIs: "рдЦреБрд░рд╛рдХ рд╣реИ",
    sayTaken: "рд▓рд┐рдпрд╛ рдХрд╣реЗрдВ",
    saySnooze: "рдмрд╛рдж рдореЗрдВ рдХрд╣реЗрдВ",
    sayHelp: "рдорджрдж рдХрд╣реЗрдВ",
    reminderAdded: "рд░рд┐рдорд╛рдЗрдВрдбрд░ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛",
    markedTaken: "рджрд╡рд╛ рд▓реА рдЧрдИ",
    snoozed: "10 рдорд┐рдирдЯ рд╕реНрдиреВрдЬ",
    caregiverNotified: "рджреЗрдЦрднрд╛рд▓рдХрд░реНрддрд╛ рдХреЛ рд╕реВрдЪрд┐рдд рдХрд┐рдпрд╛ рдЧрдпрд╛",
    fillAllFields: "рд╕рднреА рдлрд╝реАрд▓реНрдб рднрд░реЗрдВ",
    deleted: "рд░рд┐рдорд╛рдЗрдВрдбрд░ рд╣рдЯрд╛рдпрд╛ рдЧрдпрд╛",
    taken: "тЬЕ рд▓рд┐рдпрд╛",
    pending: "тП░ рдмрд╛рдХреА",
    delete: "ЁЯЧС рд╣рдЯрд╛рдПрдВ",
    markTaken: "тЬЕ рд▓рд┐рдпрд╛",
    snooze: "тП░ 10 рдорд┐рдирдЯ",
    notifyCaregiver: "ЁЯУЮ рдХреЙрд▓ рдХрд░реЗрдВ",
  },
  te: {
    selectUserTitle: "р░╡р░┐р░ир░┐р░пр▒Лр░Чр░жр░╛р░░р▒Б р░░р░Хр░В р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
    caregiverBtn: "ЁЯСитАНтЪХ р░╕р░Вр░░р░Хр▒Нр░╖р░Хр▒Бр░бр▒Б",
    patientBtn: "ЁЯдТ р░░р▒Лр░Чр░┐",
    caregiverInfo: "р░ор▒Ар░░р▒Б р░╕р░Вр░░р░Хр▒Нр░╖р░Хр▒Бр░бр▒Б р░ор▒Лр░бр▒НтАМр░▓р▒Л р░Йр░ир▒Нр░ир░╛р░░р▒Бред",
    patientInfo: "р░░р▒Лр░Чр░┐ р░ор▒Лр░бр▒Н р░╕р░Хр▒Нр░░р░┐р░пр░В.",
    addReminderTitle: "р░ор░Вр░жр▒Б р░░р░┐р░ор▒Ир░Вр░бр░░р▒Н р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐",
    labelMedicine: "р░ор░Вр░жр▒Б р░кр▒Зр░░р▒Б",
    labelDosage: "р░ор▒Лр░др░╛р░жр▒Б",
    labelTime: "р░╕р░ор░пр░В",
    labelFrequency: "р░лр▒Нр░░р▒Ар░Хр▒Нр░╡р▒Жр░ир▒Нр░╕р▒А",
    labelCaregiverPhone: "р░╕р░Вр░░р░Хр▒Нр░╖р░Хр▒Бр░бр░┐ р░лр▒Лр░ир▒Н",
    remindersTitle: "р░Ер░ир▒Нр░ир░┐ р░░р░┐р░ор▒Ир░Вр░бр░░р▒Нр░▓р▒Б",
    noReminders: "р░░р░┐р░ор▒Ир░Вр░бр░░р▒Нр░▓р▒Б р░▓р▒Зр░╡р▒Бред",
    activeRemindersTitle: "р░ор▒А р░ор░Вр░жр▒Б р░░р░┐р░ор▒Ир░Вр░бр░░р▒Нр░▓р▒Б",
    noActiveReminders: "р░Ър▒Бр░░р▒Бр░Хр▒Ир░и р░░р░┐р░ор▒Ир░Вр░бр░░р▒Нр░▓р▒Б р░▓р▒Зр░╡р▒Бред",
    voiceCommandTitle: "р░╡р░╛р░пр░┐р░╕р▒Н р░Хр░ор░╛р░Вр░бр▒Н",
    voiceInstructions: 'р░ор▒Ир░Хр▒Нр░░р▒Лр░лр▒Лр░ир▒Н: "р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░ир▒Б" | "р░др░░р▒Нр░╡р░╛р░д" | "р░╕р░╣р░╛р░пр░В"',
    quickActionsTitle: "р░др▒Нр░╡р░░р░┐р░д р░Ър░░р▒Нр░пр░▓р▒Б",
    speakAllBtn: "ЁЯФК р░Ер░ир▒Нр░ир▒А р░Ър░жр░╡р░Вр░бр░┐",
    emergencyBtn: "ЁЯЪи р░Ер░др▒Нр░пр░╡р░╕р░░ р░Хр░╛р░▓р▒Н",
    itsTimeTake: "р░Зр░кр▒Нр░кр▒Бр░бр▒Б р░╕р░ор░пр░В",
    dosageIs: "р░ор▒Лр░др░╛р░жр▒Б",
    sayTaken: "р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░ир▒Б р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐",
    saySnooze: "р░др░░р▒Нр░╡р░╛р░д р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐",
    sayHelp: "р░╕р░╣р░╛р░пр░В р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐",
    reminderAdded: "р░░р░┐р░ор▒Ир░Вр░бр░░р▒Н р░Ьр▒Лр░бр░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐",
    markedTaken: "р░ор░Вр░жр▒Б р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░░р▒Б",
    snoozed: "10 р░ир░┐р░ор░┐р░╖р░╛р░▓р▒Б р░╕р▒Нр░ир▒Вр░Ьр▒Н",
    caregiverNotified: "р░╕р░Вр░░р░Хр▒Нр░╖р░Хр▒Бр░бр░┐р░Хр░┐ р░др▒Жр░▓р░┐р░пр░Ьр▒Зр░пр░мр░бр░┐р░Вр░жр░┐",
    fillAllFields: "р░Ер░ир▒Нр░ир░┐ р░лр▒Ар░▓р▒Нр░бр▒НтАМр░▓р▒Б р░кр▒Вр░░р░┐р░Вр░Ър░Вр░бр░┐",
    deleted: "р░░р░┐р░ор▒Ир░Вр░бр░░р▒Н р░др▒Кр░▓р░Чр░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐",
    taken: "тЬЕ р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░░р▒Б",
    pending: "тП░ р░кр▒Жр░Вр░бр░┐р░Вр░Чр▒Н",
    delete: "ЁЯЧС р░др▒Кр░▓р░Чр░┐р░Вр░Ър▒Б",
    markTaken: "тЬЕ р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░░р▒Б",
    snooze: "тП░ 10 р░ир░┐р░ор░┐р░╖р░╛р░▓р▒Б",
    notifyCaregiver: "ЁЯУЮ р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
  },
  ta: {
    selectUserTitle: "рокропройро░рпН ро╡роХрпИ родрпЗро░рпНро╡рпБ",
    caregiverBtn: "ЁЯСитАНтЪХ рокро░ро╛рооро░ро┐рокрпНрокро╛ро│ро░рпН",
    patientBtn: "ЁЯдТ роирпЛропро╛ро│ро┐",
    caregiverInfo: "роирпАроЩрпНроХро│рпН рокро░ро╛рооро░ро┐рокрпНрокро╛ро│ро░рпН рокропройрпНроорпБро▒рпИропро┐ро▓рпН роЙро│рпНро│рпАро░рпНроХро│рпНред",
    patientInfo: "роирпЛропро╛ро│ро┐ рокропройрпНроорпБро▒рпИ роЪрпЖропро▓рпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯродрпБред",
    addReminderTitle: "рооро░рпБроирпНродрпБ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН",
    labelMedicine: "рооро░рпБроирпНродрпБ рокрпЖропро░рпН",
    labelDosage: "роЕро│ро╡рпБ",
    labelTime: "роирпЗро░роорпН",
    labelFrequency: "роЕроЯро┐роХрпНроХроЯро┐",
    labelCaregiverPhone: "рокро░ро╛рооро░ро┐рокрпНрокро╛ро│ро░рпН родрпКро▓рпИрокрпЗроЪро┐",
    remindersTitle: "роЕройрпИродрпНродрпБ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН",
    noReminders: "роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН роЗро▓рпНро▓рпИред",
    activeRemindersTitle: "роЙроЩрпНроХро│рпН рооро░рпБроирпНродрпБ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН",
    noActiveReminders: "роЪрпЖропро▓ро┐ро▓рпН роЙро│рпНро│ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН роЗро▓рпНро▓рпИред",
    voiceCommandTitle: "роХрпБро░ро▓рпН роХроЯрпНроЯро│рпИ",
    voiceInstructions: 'роорпИроХрпНро░рпЛроГрокрпЛройрпН: "роОроЯрпБродрпНродрпЗройрпН" | "рокро┐ро▒роХрпБ" | "роЙродро╡ро┐"',
    quickActionsTitle: "ро╡ро┐ро░рпИро╡рпБ роЪрпЖропро▓рпНроХро│рпН",
    speakAllBtn: "ЁЯФК роЕройрпИродрпНродрпИропрпБроорпН рокроЯро┐роХрпНроХро╡рпБроорпН",
    emergencyBtn: "ЁЯЪи роЕро╡роЪро░ роЕро┤рпИрокрпНрокрпБ",
    itsTimeTake: "роЗрокрпНрокрпЛродрпБ роирпЗро░роорпН",
    dosageIs: "роЕро│ро╡рпБ",
    sayTaken: "роОроЯрпБродрпНродрпЗройрпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН",
    saySnooze: "рокро┐ро▒роХрпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН",
    sayHelp: "роЙродро╡ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН",
    reminderAdded: "роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ",
    markedTaken: "рооро░рпБроирпНродрпБ роОроЯрпБроХрпНроХрокрпНрокроЯрпНроЯродрпБ",
    snoozed: "10 роиро┐рооро┐роЯроЩрпНроХро│рпН роТродрпНродро┐ро╡рпИ",
    caregiverNotified: "рокро░ро╛рооро░ро┐рокрпНрокро╛ро│ро░рпБроХрпНроХрпБ родрпЖро░ро┐ро╡ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ",
    fillAllFields: "роЕройрпИродрпНродрпБ рокрпБро▓роЩрпНроХро│рпИропрпБроорпН роиро┐ро░рокрпНрокро╡рпБроорпН",
    deleted: "роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роирпАроХрпНроХрокрпНрокроЯрпНроЯродрпБ",
    taken: "тЬЕ роОроЯрпБродрпНродродрпБ",
    pending: "тП░ роиро┐ро▓рпБро╡рпИ",
    delete: "ЁЯЧС роирпАроХрпНроХрпБ",
    markTaken: "тЬЕ роОроЯрпБродрпНродродрпБ",
    snooze: "тП░ 10 роиро┐рооро┐роЯроорпН",
    notifyCaregiver: "ЁЯУЮ роЕро┤рпИроХрпНроХро╡рпБроорпН",
  },
};

// Initialize on page load
window.addEventListener("DOMContentLoaded", function () {
  console.log("DOM loaded, initializing...");
  init();
});

function init() {
  console.log("Initializing app...");
  loadFromStorage();
  attachEventListeners();
  updateTranslations();
  startReminderChecker();
  requestNotificationPermission();
}

function loadFromStorage() {
  try {
    appState.darkMode = JSON.parse(localStorage.getItem("darkMode") || "false");
    appState.language = localStorage.getItem("language") || "en";
    appState.reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
    appState.caregiverPhone = localStorage.getItem("caregiverPhone") || "";

    if (appState.darkMode) {
      document.body.classList.add("dark-mode");
    }

    document.getElementById("language-select").value = appState.language;
    document.getElementById("caregiver-phone").value = appState.caregiverPhone;
  } catch (error) {
    console.error("Error loading from storage:", error);
  }
}

function saveToStorage() {
  try {
    localStorage.setItem("darkMode", JSON.stringify(appState.darkMode));
    localStorage.setItem("language", appState.language);
    localStorage.setItem("reminders", JSON.stringify(appState.reminders));
    localStorage.setItem("caregiverPhone", appState.caregiverPhone);
  } catch (error) {
    console.error("Error saving to storage:", error);
  }
}

function attachEventListeners() {
  console.log("Attaching event listeners...");

  const themeToggle = document.getElementById("theme-toggle");
  const backBtn = document.getElementById("back-btn");
  const languageSelect = document.getElementById("language-select");
  const caregiverBtn = document.getElementById("caregiver-btn");
  const patientBtn = document.getElementById("patient-btn");
  const addReminderBtn = document.getElementById("add-reminder-btn");
  const voiceBtn = document.getElementById("voice-btn");
  const speakAllBtn = document.getElementById("speak-all-btn");
  const emergencyBtn = document.getElementById("emergency-btn");

  if (themeToggle) {
    themeToggle.addEventListener("click", function (e) {
      e.preventDefault();
      console.log("Theme toggle clicked");
      toggleTheme();
    });
  }

  if (backBtn) {
    backBtn.addEventListener("click", function (e) {
      e.preventDefault();
      console.log("Back button clicked");
      goBack();
    });
  }

  if (languageSelect) {
    languageSelect.addEventListener("change", function (e) {
      console.log("Language changed to:", e.target.value);
      changeLanguage();
    });
  }

  if (caregiverBtn) {
    caregiverBtn.addEventListener("click", function (e) {
      e.preventDefault();
      console.log("Caregiver button clicked");
      selectUserType("caregiver");
    });
  }

  if (patientBtn) {
    patientBtn.addEventListener("click", function (e) {
      e.preventDefault();
      console.log("Patient button clicked");
      selectUserType("patient");
    });
  }

  if (addReminderBtn) {
    addReminderBtn.addEventListener("click", function (e) {
      e.preventDefault();
      console.log("Add reminder button clicked");
      addReminder();
    });
  }

  if (voiceBtn) {
    voiceBtn.addEventListener("click", function (e) {
      e.preventDefault();
      console.log("Voice button clicked");
      startVoiceRecognition();
    });
  }

  if (speakAllBtn) {
    speakAllBtn.addEventListener("click", function (e) {
      e.preventDefault();
      console.log("Speak all button clicked");
      speakAllReminders();
    });
  }

  if (emergencyBtn) {
    emergencyBtn.addEventListener("click", function (e) {
      e.preventDefault();
      console.log("Emergency button clicked");
      emergencyCall();
    });
  }
}

function toggleTheme() {
  console.log("Toggling theme. Current:", appState.darkMode);
  appState.darkMode = !appState.darkMode;
  document.body.classList.toggle("dark-mode");
  saveToStorage();
  console.log("Theme toggled. New:", appState.darkMode);
}

function changeLanguage() {
  appState.language = document.getElementById("language-select").value;
  saveToStorage();
  updateTranslations();
  console.log("Language changed to:", appState.language);
}

function updateTranslations() {
  const t = translations[appState.language] || translations.en;

  document.getElementById("select-user-title").textContent = t.selectUserTitle;
  document.getElementById("caregiver-info").textContent = t.caregiverInfo;
  document.getElementById("patient-info").textContent = t.patientInfo;
  document.getElementById("add-reminder-title").textContent =
    t.addReminderTitle;
  document.getElementById("label-medicine").textContent = t.labelMedicine;
  document.getElementById("label-dosage").textContent = t.labelDosage;
  document.getElementById("label-time").textContent = t.labelTime;
  document.getElementById("label-frequency").textContent = t.labelFrequency;
  document.getElementById("label-caregiver-phone").textContent =
    t.labelCaregiverPhone;
  document.getElementById("reminders-title").textContent = t.remindersTitle;
  document.getElementById("no-reminders").textContent = t.noReminders;
  document.getElementById("active-reminders-title").textContent =
    t.activeRemindersTitle;
  document.getElementById("no-active-reminders").textContent =
    t.noActiveReminders;
  document.getElementById("voice-command-title").textContent =
    t.voiceCommandTitle;
  document.getElementById("voice-instructions").innerHTML = t.voiceInstructions;
  document.getElementById("quick-actions-title").textContent =
    t.quickActionsTitle;
}

function selectUserType(type) {
  console.log("Selecting user type:", type);
  appState.userType = type;

  document.getElementById("user-selection").classList.add("hidden");
  document.getElementById("language-section").classList.add("hidden");
  document.getElementById("back-btn").classList.remove("hidden");

  if (type === "caregiver") {
    document.getElementById("caregiver-panel").classList.remove("hidden");
    document.getElementById("patient-panel").classList.add("hidden");
    renderCaregiverReminders();
  } else {
    document.getElementById("patient-panel").classList.remove("hidden");
    document.getElementById("caregiver-panel").classList.add("hidden");
    renderPatientReminders();
  }
}

function goBack() {
  console.log("Going back");
  appState.userType = null;

  document.getElementById("caregiver-panel").classList.add("hidden");
  document.getElementById("patient-panel").classList.add("hidden");
  document.getElementById("back-btn").classList.add("hidden");
  document.getElementById("user-selection").classList.remove("hidden");
  document.getElementById("language-section").classList.remove("hidden");
}

function addReminder() {
  const t = translations[appState.language] || translations.en;

  const medicineName = document.getElementById("medicine-name").value.trim();
  const dosage = document.getElementById("dosage").value.trim();
  const time = document.getElementById("reminder-time").value;
  const frequency = document.getElementById("frequency").value;

  console.log("Adding reminder:", { medicineName, dosage, time, frequency });

  if (!medicineName || !dosage || !time) {
    alert(t.fillAllFields);
    return;
  }

  const reminder = {
    id: Date.now(),
    medicineName,
    dosage,
    time,
    frequency,
    taken: false,
    createdAt: new Date().toISOString(),
  };

  appState.reminders.push(reminder);
  appState.caregiverPhone = document
    .getElementById("caregiver-phone")
    .value.trim();
  saveToStorage();

  document.getElementById("medicine-name").value = "";
  document.getElementById("dosage").value = "";
  document.getElementById("reminder-time").value = "";

  speak(t.reminderAdded);
  renderCaregiverReminders();
  console.log("Reminder added successfully");
}

function renderCaregiverReminders() {
  const t = translations[appState.language] || translations.en;
  const listElement = document.getElementById("caregiver-reminder-list");

  if (appState.reminders.length === 0) {
    listElement.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">ЁЯУЛ</div>
                <p>${t.noReminders}</p>
            </div>
        `;
    return;
  }

  const sortedReminders = appState.reminders.sort(
    (a, b) => new Date(a.time) - new Date(b.time)
  );

  listElement.innerHTML = sortedReminders
    .map(
      (reminder) => `
        <div class="reminder-item ${reminder.taken ? "taken" : "pending"}">
            <div class="reminder-header">
                <div>
                    <div class="reminder-title">${reminder.medicineName}</div>
                    <div class="reminder-details">ЁЯТК ${reminder.dosage}</div>
                    <div class="reminder-details">ЁЯХР ${new Date(
                      reminder.time
                    ).toLocaleString()}</div>
                    <div class="reminder-details">ЁЯФД ${reminder.frequency}</div>
                </div>
                <span class="status-badge ${
                  reminder.taken ? "status-taken" : "status-pending"
                }">
                    ${reminder.taken ? t.taken : t.pending}
                </span>
            </div>
            <div class="reminder-actions">
                <button class="btn-danger" onclick="deleteReminder(${
                  reminder.id
                })">
                    ${t.delete}
                </button>
            </div>
        </div>
    `
    )
    .join("");
}

function renderPatientReminders() {
  const t = translations[appState.language] || translations.en;
  const listElement = document.getElementById("patient-reminder-list");

  const activeReminders = appState.reminders.filter((r) => !r.taken);

  if (activeReminders.length === 0) {
    listElement.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">ЁЯТК</div>
                <p>${t.noActiveReminders}</p>
            </div>
        `;
    return;
  }

  const sortedReminders = activeReminders.sort(
    (a, b) => new Date(a.time) - new Date(b.time)
  );

  listElement.innerHTML = sortedReminders
    .map(
      (reminder) => `
        <div class="reminder-item pending">
            <div class="reminder-header">
                <div>
                    <div class="reminder-title">${reminder.medicineName}</div>
                    <div class="reminder-details">ЁЯТК ${reminder.dosage}</div>
                    <div class="reminder-details">ЁЯХР ${new Date(
                      reminder.time
                    ).toLocaleString()}</div>
                </div>
            </div>
            <div class="reminder-actions">
                <button class="btn-success" onclick="markTaken(${reminder.id})">
                    ${t.markTaken}
                </button>
                <button class="btn-warning" onclick="snoozeReminder(${
                  reminder.id
                })">
                    ${t.snooze}
                </button>
                <button class="btn-danger" onclick="notifyCaregiver(${
                  reminder.id
                })">
                    ${t.notifyCaregiver}
                </button>
            </div>
        </div>
    `
    )
    .join("");
}

function markTaken(id) {
  const t = translations[appState.language] || translations.en;
  const reminder = appState.reminders.find((r) => r.id === id);

  if (reminder) {
    reminder.taken = true;
    saveToStorage();
    speak(t.markedTaken);

    if (appState.userType === "caregiver") {
      renderCaregiverReminders();
    } else {
      renderPatientReminders();
    }
  }
}

function snoozeReminder(id) {
  const t = translations[appState.language] || translations.en;
  const reminder = appState.reminders.find((r) => r.id === id);

  if (reminder) {
    const currentTime = new Date(reminder.time);
    const newTime = new Date(currentTime.getTime() + 10 * 60000);
    reminder.time = newTime.toISOString().slice(0, 16);
    saveToStorage();
    speak(t.snoozed);
    renderPatientReminders();
  }
}

function notifyCaregiver(id) {
  const t = translations[appState.language] || translations.en;
  const reminder = appState.reminders.find((r) => r.id === id);

  if (reminder) {
    const message = Alert: ${reminder.medicineName} - Patient needs help or missed dose;

    if (appState.caregiverPhone) {
      alert(SMS sent to ${appState.caregiverPhone}: ${message});
      speak(t.caregiverNotified);
    } else {
      alert("No caregiver phone number registered");
    }
  }
}

function deleteReminder(id) {
  const t = translations[appState.language] || translations.en;

  if (confirm("Delete this reminder?")) {
    appState.reminders = appState.reminders.filter((r) => r.id !== id);
    saveToStorage();
    speak(t.deleted);

    if (appState.userType === "caregiver") {
      renderCaregiverReminders();
    } else {
      renderPatientReminders();
    }
  }
}

function speak(text) {
  if ("speechSynthesis" in window) {
    speechSynthesis.cancel();

    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = languageCodes[appState.language] || "en-IN";
    utterance.rate = 0.9;
    utterance.pitch = 1;
    utterance.volume = 1;

    speechSynthesis.speak(utterance);
  }
}

function speakAllReminders() {
  const t = translations[appState.language] || translations.en;
  const activeReminders = appState.reminders.filter((r) => !r.taken);

  if (activeReminders.length === 0) {
    speak(t.noActiveReminders);
    return;
  }

  activeReminders.forEach((reminder, index) => {
    const time = new Date(reminder.time).toLocaleTimeString();
    const message = `${index + 1}. ${reminder.medicineName}, ${t.dosageIs} ${
      reminder.dosage
    }, at ${time}`;

    setTimeout(() => {
      speak(message);
    }, index * 3000);
  });
}

function startVoiceRecognition() {
  const t = translations[appState.language] || translations.en;

  if (!("webkitSpeechRecognition" in window)) {
    alert(
      "Voice recognition not supported. Please use Chrome or Edge browser."
    );
    return;
  }

  const recognition = new webkitSpeechRecognition();
  recognition.lang = languageCodes[appState.language] || "en-IN";
  recognition.continuous = false;
  recognition.interimResults = false;

  recognition.onstart = function () {
    console.log("Voice recognition started");
    document.getElementById("voice-btn").classList.add("listening");
    document.getElementById("listening-text").classList.remove("hidden");
  };

  recognition.onend = function () {
    console.log("Voice recognition ended");
    document.getElementById("voice-btn").classList.remove("listening");
    document.getElementById("listening-text").classList.add("hidden");
  };

  recognition.onresult = function (event) {
    const transcript = event.results[0][0].transcript.toLowerCase();
    console.log("Voice input:", transcript);
    processVoiceCommand(transcript);
  };

  recognition.onerror = function (event) {
    console.error("Speech recognition error:", event.error);
    document.getElementById("voice-btn").classList.remove("listening");
    document.getElementById("listening-text").classList.add("hidden");
  };

  recognition.start();
}

function processVoiceCommand(command) {
  const t = translations[appState.language] || translations.en;
  const activeReminder = appState.reminders.find((r) => !r.taken);

  if (!activeReminder) {
    speak(t.noActiveReminders);
    return;
  }

  const takenKeywords = [
    "taken",
    "рд▓реА",
    "рд▓рд┐рдпрд╛",
    "р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░ир▒Б",
    "роОроЯрпБродрпНродрпБ",
    "ржЦрзЗржпрж╝рзЗржЫрж┐",
    "рдШреЗрддрд▓реЗ",
    "рк▓рлАркзрлБркВ",
    "р▓др│Жр▓Чр│Жр▓жр│Бр▓Хр│Кр▓Вр▓б",
    "р┤Ор┤Яр╡Бр┤др╡Нр┤др╡Б",
    "ри▓ри┐риЖ",
  ];
  const snoozeKeywords = [
    "snooze",
    "рдмрд╛рдж",
    "рддрд░реНрд╡рд╛рдд",
    "р░др░░р▒Нр░╡р░╛р░д",
    "рокро┐ро▒роХрпБ",
    "ржкрж░рзЗ",
    "рдирдВрддрд░",
    "рккркЫрлА",
    "р▓ир▓Вр▓др▓░",
    "р┤кр┤┐р┤ир╡Нр┤ир╡Ар┤Яр╡Н",
    "римри╛риЕриж",
  ];
  const helpKeywords = [
    "help",
    "рдорджрдж",
    "рдорджрдд",
    "р░╕р░╣р░╛р░пр░В",
    "роЙродро╡ро┐",
    "рж╕рж╛рж╣рж╛ржпрзНржп",
    "ркоркжркж",
    "р▓╕р▓╣р▓╛р▓п",
    "р┤╕р┤╣р┤╛р┤пр┤В",
    "риорижриж",
    "miss",
    "рдЫреВрдЯ",
    "р░др░кр▒Нр░кр░┐р░кр▒Лр░пр░┐р░Вр░жр░┐",
    "родро╡ро▒",
  ];

  if (takenKeywords.some((keyword) => command.includes(keyword))) {
    markTaken(activeReminder.id);
  } else if (snoozeKeywords.some((keyword) => command.includes(keyword))) {
    snoozeReminder(activeReminder.id);
  } else if (helpKeywords.some((keyword) => command.includes(keyword))) {
    notifyCaregiver(activeReminder.id);
  } else {
    speak("Command not recognized. Please say: taken, snooze, or help");
  }
}

function startReminderChecker() {
  setInterval(function () {
    checkReminders();
  }, 30000);

  setTimeout(function () {
    checkReminders();
  }, 2000);
}

function checkReminders() {
  const t = translations[appState.language] || translations.en;
  const now = new Date();

  appState.reminders.forEach(function (reminder) {
    if (reminder.taken) return;

    const reminderTime = new Date(reminder.time);
    const timeDiff = Math.abs(now - reminderTime);

    if (timeDiff < 60000) {
      triggerReminderAlert(reminder, t);
    }
  });
}

function triggerReminderAlert(reminder, t) {
  const message = ${t.itsTimeTake} ${reminder.medicineName}. ${t.dosageIs} ${reminder.dosage}. ${t.sayTaken}. ${t.saySnooze}. ${t.sayHelp};

  speak(message);

  if (Notification.permission === "granted") {
    new Notification("ArogyaVaani Reminder", {
      body: ${reminder.medicineName} - ${reminder.dosage},
      icon: "ЁЯТК",
      requireInteraction: true,
    });
  }

  playAlertSound();
}

function playAlertSound() {
  try {
    const audioContext = new (window.AudioContext ||
      window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();

    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);

    oscillator.frequency.value = 800;
    oscillator.type = "sine";

    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(
      0.01,
      audioContext.currentTime + 0.5
    );

    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.5);
  } catch (error) {
    console.error("Error playing alert sound:", error);
  }
}

function emergencyCall() {
  const t = translations[appState.language] || translations.en;

  if (appState.caregiverPhone) {
    speak("Calling caregiver for emergency assistance");
    alert(Emergency call to ${appState.caregiverPhone});
    window.location.href = tel:${appState.caregiverPhone};
  } else {
    alert("No caregiver phone number registered");
  }
}

function requestNotificationPermission() {
  if ("Notification" in window && Notification.permission === "default") {
    Notification.requestPermission();
  }
}

console.log("Script fully loaded");
